//**************************************************************************************
//  Copyright (c) 2017  Daniel D Miller
//  Handlers for system-tray connection
//  
//  Collected by:   Daniel D. Miller
//**************************************************************************************

#include <windows.h>

#include "resource.h"
#include "ClearIconTray.h"

extern HINSTANCE g_hinst ;

// #define  WM_USER_SHELLICON WM_USER + 1
static NOTIFYICONDATA NotifyIconData;

//***************************************************************
// put the icon into a system tray
//  Call from WM_INITDIALOG
//***************************************************************
void attach_tray_icon(HWND hwnd, char const * const szClassName)
{
      NotifyIconData.cbSize = sizeof (NOTIFYICONDATA);
      NotifyIconData.hWnd = hwnd;
      NotifyIconData.uID = IDI_MAINICON ;
      NotifyIconData.uFlags = NIF_ICON | NIF_TIP | NIF_MESSAGE;
      NotifyIconData.uCallbackMessage = WM_USER; // tray events will generate WM_USER event
      NotifyIconData.hIcon = (HICON) LoadIcon (g_hinst, MAKEINTRESOURCE (IDI_MAINICON));
      lstrcpy (NotifyIconData.szTip, szClassName); // max 64 characters
      //  getting string from STRINGTABLE in .rc file
      // LoadString(hInstance, IDS_APPTOOLTIP,nidApp.szTip,MAX_LOADSTRING);
      Shell_NotifyIcon (NIM_ADD, &NotifyIconData);
}


//***************************************************************
//  event generated by a system tray - the type of tray event that
//  generated the message can be found in lParam.
//  However, this code caused a situation where clicking outside the
//  title bar did *not* make the menu go away.
//  Microsoft's solutions to this problem are documented in
//  http://support.microsoft.com/kb/q135788/
//  and are implemented below.
//***************************************************************
BOOL respond_to_tray_clicks(HWND hwnd, HMENU hMenu, LPARAM lParam)
{
   switch (lParam)   {
   case WM_LBUTTONUP:
   case WM_RBUTTONUP:
      {
      POINT MouseCoordinates;
      // display a tray menu
      SetForegroundWindow(hwnd); //  MSoft fix1 for stuck title bar
      GetCursorPos(&MouseCoordinates);
      TrackPopupMenu(hMenu, TPM_LEFTALIGN | TPM_LEFTBUTTON | TPM_BOTTOMALIGN,
         MouseCoordinates.x, MouseCoordinates.y, 0, hwnd, NULL);
      PostMessage(hwnd, WM_NULL, 0, 0); //  MSoft fix2 for stuck title bar
      }         
      return TRUE;
   }  //lint !e744
   return FALSE;
}

// remove the icon from a system tray and free the .dll handle
void release_systray_resource(void)
{
   Shell_NotifyIcon (NIM_DELETE, &NotifyIconData);
}

